<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:osgi="http://www.eclipse.org/gemini/blueprint/schema/blueprint"
	xmlns:osgix="http://www.eclipse.org/gemini/blueprint/schema/blueprint-compendium"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.eclipse.org/gemini/blueprint/schema/blueprint
		http://www.eclipse.org/gemini/blueprint/schema/blueprint/gemini-blueprint.xsd
		http://www.eclipse.org/gemini/blueprint/schema/blueprint-compendium
		http://www.eclipse.org/gemini/blueprint/schema/blueprint-compendium/gemini-blueprint-compendium.xsd">

	<!-- All available LoxoneService instances -->
	<osgi:list id="loxoneServices" availability="optional"
		interface="net.solarnetwork.node.loxone.LoxoneService"/>
	
	<!-- 
		Inject some JavaScript directly into SolarNode Setup Web. This provides the action
		to undertake in the SolarNode Settings GUI when the custom "Configure" button
		is pressed.
	 -->
	<osgi:service interface="net.solarnetwork.node.setup.SetupResourceProvider">
		<bean class="net.solarnetwork.node.setup.SimpleSetupResourceProvider">
			<property name="resources">
				<list>
					<bean class="net.solarnetwork.node.setup.ClasspathSetupResource"> 
						<constructor-arg value="loxone-settings-integration.js"/>
						<constructor-arg value="loxone-settings-integration.js"/>
						<constructor-arg value="net.solarnetwork.node.setup.web.loxone.LoxoneHomeController"/>
						<constructor-arg value="#{T(net.solarnetwork.node.setup.SetupResource).JAVASCRIPT_CONTENT_TYPE}"/>
						<constructor-arg value="#{T(net.solarnetwork.node.setup.SetupResource).WEB_CONSUMER_TYPES}"/>
						<constructor-arg value="#{T(net.solarnetwork.node.setup.SetupResource).USER_ROLES}"/>
					</bean>
				</list>
			</property>
		</bean>
	</osgi:service>
	
	<!-- A SimpMessagingTemplate for the 'brokerChannel' configured for Loxone messages -->
	<osgi:service interface="org.springframework.messaging.simp.SimpMessageSendingOperations">
		<osgi:service-properties>
			<entry key="channel" value="brokerChannel"/>
			<entry key="function" value="loxone"/>
		</osgi:service-properties>
		<!-- The websocket:message-broker element will expose a SimpMessageSendingTemplate
		     for the broker channel automatically, but under a generated ID. As we want to 
		     expose that template as a service, use SimpMessageSendingOperationsFactoryBean to
		     get that instance via auto-wiring, then expose it as our service bean here. -->
		<bean class="net.solarnetwork.util.SimpMessageSendingOperationsFactoryBean" autowire="byType"/>
	</osgi:service>
	
</beans>
