/* ==================================================================
 * BaseConfigurationEntityDao.java - 19/09/2016 4:53:25 PM
 * 
 * Copyright 2007-2016 SolarNetwork.net Dev Team
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation; either version 2 of 
 * the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License 
 * along with this program; if not, write to the Free Software 
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
 * 02111-1307 USA
 * ==================================================================
 */

package net.solarnetwork.node.loxone.dao.jdbc;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import net.solarnetwork.domain.SortDescriptor;
import net.solarnetwork.node.loxone.dao.ConfigurationEntityDao;
import net.solarnetwork.node.loxone.domain.BaseConfigurationEntity;

/**
 * Base DAO for {@link BaseConfigurationEntity} classes.
 * 
 * @author matt
 * @version 1.0
 */
public abstract class BaseConfigurationEntityDao<T extends BaseConfigurationEntity>
		extends BaseUUIDEntityDao<T> implements ConfigurationEntityDao<T> {

	public static final String SQL_DELETE_FOR_CONFIG = "delete-for-config";
	public static final String SQL_FIND_FOR_CONFIG = "find-for-config";

	private final Class<T> entityClass;

	@Override
	public Class<T> entityClass() {
		return entityClass;
	}

	/**
	 * Init with an an entity name and table version, deriving various names
	 * based on conventions.
	 * 
	 * @param entityClass
	 *        The class of the entity managed by this DAO.
	 * @param entityName
	 *        The entity name to use. This name forms the basis of the default
	 *        SQL resource prefix, table name, tables version query, and SQL
	 *        init resource.
	 * @param version
	 *        The tables version.
	 * @param rowMapper
	 *        A row mapper to use when mapping entity query results.
	 */
	public BaseConfigurationEntityDao(Class<T> entityClass, String entityName, int version,
			RowMapper<T> rowMapper) {
		super(entityName, version, rowMapper);
		this.entityClass = entityClass;
	}

	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	@Override
	public void store(T entity) {
		storeEntity(entity);
	}

	@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)
	@Override
	public T load(Long configId, UUID uuid) {
		return getEntityByUUID(configId, uuid);
	}

	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	@Override
	public int deleteAllForConfig(Long configId) {
		int result = getJdbcTemplate().update(getSqlResource(SQL_DELETE_FOR_CONFIG), configId);
		return result;
	}

	@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)
	@Override
	public List<T> findAllForConfig(Long configId, List<SortDescriptor> sortDescriptors) {
		String sql = getSqlResource(SQL_FIND_FOR_CONFIG);
		sql = handleSortDescriptors(sql, sortDescriptors, sortDescriptorColumnMapping());
		List<T> results = getJdbcTemplate().query(sql, getRowMapper(), configId);
		return results;
	}

	/**
	 * Get a mapping of sort descriptor keys to associated SQL column values for
	 * use in an {@code ORDER BY} clause.
	 * 
	 * This method returns mappings for the {@code name} and
	 * {@code defaultrating} keys.
	 * 
	 * @return The mapping.
	 */
	protected Map<String, String> sortDescriptorColumnMapping() {
		Map<String, String> m = new HashMap<String, String>();
		m.put("name", "lower(name)");
		m.put("defaultrating", "sort");
		return m;
	}

	/**
	 * Add an {@code ORDER BY} clause to a SQL query based on a set of sort
	 * descriptors.
	 * 
	 * If {@code sortDescriptors} is {@code null} or empty, this method does
	 * nothing.
	 * 
	 * Otherwise, the method will look for an existing {@code ORDER BY} clause
	 * (case sensitive!) and replace it with one generated by the descriptors.
	 * This allows the SQL to be written with a default ordering, which is only
	 * changed if specific sort descriptors are provided. If an existing
	 * {@code ORDER BY} clause is not present, the method will append the
	 * generated clause.
	 * 
	 * <b>Note:</b> the sort keys will be forced to lower case. The
	 * {@code columnMapping} keys should all be lower case already.
	 * 
	 * @param sql
	 *        The original SQL statement.
	 * @param sortDescriptors
	 *        The optional sort to apply.
	 * @param columnMapping
	 *        A mapping of sort keys (must be lower case) to associated column
	 *        values to use in the {@code ORDER BY} clause.
	 * @return The updated SQL statement.
	 */
	protected String handleSortDescriptors(String sql, List<SortDescriptor> sortDescriptors,
			Map<String, String> columnMapping) {
		if ( sortDescriptors != null && !sortDescriptors.isEmpty() ) {
			StringBuilder buf = new StringBuilder();
			for ( SortDescriptor sort : sortDescriptors ) {
				String key = sort.getSortKey();
				if ( key == null ) {
					continue;
				}
				String column = columnMapping.get(key.toLowerCase());
				if ( column == null ) {
					continue;
				}
				if ( buf.length() > 0 ) {
					buf.append(",");
				}
				buf.append(" ").append(column).append(" ").append(sort.isDescending() ? "DESC" : "ASC");
			}
			if ( buf.length() > 0 ) {
				int idx = sql.lastIndexOf("ORDER BY");
				if ( idx < 0 ) {
					buf.insert(0, " ORDER BY ");
					buf.insert(0, sql);
				} else {
					buf.insert(0, "ORDER BY ");
					buf.insert(0, sql.substring(0, idx));
				}
				sql = buf.toString();
			}
		}
		return sql;
	}

}
